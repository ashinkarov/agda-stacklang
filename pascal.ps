
/draw {
    dup 1 eq {
        1 sub index 20 string cvs show
        pop
    }
    {
        dup    % .. 1 n n   
        index  % .. 1 n x
        20 string cvs show
        (--) show
        1 sub
        draw
    } ifelse
} def

/popn {
    dup 0 gt {
        exch pop
        1 sub
        popn
    }
    {
        pop
    } ifelse
} def

/draw-sz {
    dup 0 eq {
        % ... sz 0
        pop
    }
    {
                      % ... sz i
        dup           % ... sz i i
        1 add index   % ... sz i x
        20 string cvs show
        % add leading zeroes
        %1000 add 7 string cvs 1 3 getinterval show
        (  ) show
        1 sub
        draw-sz
    } ifelse
} def

/pascal-next {
    % 1 .. 1 | 1 x? ... n k -- ... (n+1) (k-1)
    dup 0 gt {
        exch           % ... 1 k n
        dup            % ... 1 k n n
        2 add index    % ... 1 k n p1
        3 1 roll dup   % ... 1 p1 k n n
        2 add index    % ... 1 p1 k n p2
        dup 1 eq {
            % This means that we reached right border of the triangle
            4 3 roll   % ... 1 k n p2 p1
            add 1      % ... 1 k n p2+p1 1
            4 2 roll   % ... 1 p2+p1 1 k n
            1 add      % ... 1 p2+p1 1 k (1+n)
            exch       % ... 1 p2+p1 1 (1+n) k
            1 sub 1    % ... 1 p2+p1 1 (1+n) (k-1) 1
            3 1 roll   % ... 1 p2+p1 1 1 (1+n) (k-1)

            % Draw the line before carrying on further
            1 index 3 add copy
            %dup 20 mul 200 add
            %exch 15 mul 100 add exch
            20 mul 200 add
            100 exch
            moveto
            exch pop 
            dup draw-sz
            popn
            %(xx) show
            %10 draw

            pascal-next
        }
        {
            % Recursive case
            4 3 roll   % ... 1 k n p2 p1
            add        % ... 1 k n p2+p1
            3 1 roll   % ... 1 p2+p1 k n
            exch       % ... 1 p2+p1 n k
            pascal-next
        } ifelse
    } if
} def



/pascal-tri {
    dup 1 eq {
        pop 1 1
    }
    {
        dup 2 eq {
            pop 1 1 2
        }
        {
            1 1 
            1 2
            5 4 roll
            2 sub
            pascal-next
            pop exch pop
        } ifelse
    } ifelse
    
    %1 1 % prev line
    %1 2 2   % next line
    %pascal-next
    % 1 3 1 roll exch
    % pascal-next
    % % 1 exch
    % % pascal-next
} def


/Times-Bold findfont 20 scalefont setfont
100 100 moveto
41 42 43 44 45 46 13

pascal-tri

/padthree
{
   1000 add 7 string cvs 1 3 getinterval show
} def


%3 draw
%2 1 1 1 2
%5 4 roll
%1 2 3 3
%6
%draw
showpage
